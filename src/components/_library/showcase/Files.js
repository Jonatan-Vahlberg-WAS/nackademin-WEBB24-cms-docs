import { useEffect, useState } from 'react'
import { getVariantCombinations } from '../../../utils/componentHelpers'
import { useMemo } from 'react'

const { default: File } = require('../Form/Files/TWFile')

const fileContents = {
  image: {
    name: 'image.jpg',
    size: '1.2MB',
    type: 'image/jpeg'
  },
  pdf: {
    name: 'document.pdf',
    size: '3.4MB',
    type: 'application/pdf'
  },
  doc: {
    name: 'word-document.docx',
    size: '2.2MB',
    type: 'application/msword'
  }
}

const Files = () => {
  const [percent, setPercent] = useState(Math.floor(Math.random() * 100))

  // useEffect(() => {
  //   const interval = setInterval(() => {
  //     setPercent((prev) => (prev + 10) % 101);
  //   }, 400);

  //   return () => clearInterval(interval);
  // }, []);

  const files = [{ file: fileContents.image }, { file: fileContents.pdf }, { file: fileContents.doc }]

  const autoGeneratedFileVariants = {
    base: {
      isAutoGenerated: true,
      isUploaded: true,
      onClick: () => {
        console.log('clicked auto generated file')
      }
    },
    file: files,
    iconSize: ['md', 'sm'],
    disabled: [true, false]
  }

  const errorFileVariants = {
    error: ['File of this type is not allowed'],
    file: files,
    iconSize: ['md', 'sm'],
    disabled: [true, false]
  }

  const ghostFileVariants = {
    isGhost: true,
    isUploaded: true,
    file: files,
    iconSize: ['md', 'sm'],
    onClick: () => {
      console.log('clicked ghost file')
    }
  }

  const uploadedFileVariants = {
    isUploaded: [true],
    file: files,
    iconSize: ['md', 'sm'],
    onClick: () => {
      console.log('clicked uploaded file')
    }
  }

  const pendingFileVariants = {
    isUploaded: [false],
    percent: percent,
    file: files,
    iconSize: ['md', 'sm']
  }

  const linkFileVariants = {
    isUploaded: true,
    asLink: true,
    isEditable: false,
    isDeletable: false,
    onClick: () => {
      console.log('clicked link file')
    },
    kinds: [
      {
        withIcon: true,
        iconSize: 'md',
        file: files[0].file
      },
      {
        withIcon: true,
        iconSize: 'sm',
        file: files[1].file
      },
      {
        withIcon: false,
        file: files[2].file
      }
    ]
  }

  const fileVariants = [
    autoGeneratedFileVariants,
    errorFileVariants,
    ghostFileVariants,
    uploadedFileVariants,
    pendingFileVariants,
    linkFileVariants
  ]

  const fileCombinations = useMemo(() => {
    const combinations = []
    fileVariants.forEach((variant) => {
      combinations.push(...getVariantCombinations(variant))
    })
    return combinations
  }, [fileVariants])

  return (
    <div className='tw:!grid tw:!gap-4 tw:!grid-cols-2 tw:md:!grid-cols-4'>
      {fileCombinations.map((combination, index) => (
        <File
          key={index}
          {...combination}
          nameProps={{
            title: `File ${JSON.stringify(combination)}`
          }}
        />
      ))}
    </div>
  )
}
export default Files
