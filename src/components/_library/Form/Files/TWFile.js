import { useState } from "react";

import FileActions from "./TWFileActions";
import FileIcon from "./TWFileIcon";
import FileLoadingBar from "./TWFileLoadingBar";
import FileName from "./TWFileName";
import FileError from "./TWFileError";
import FileWrapper from "./TWFileWrapper";
import FileRenamerForm from "./TWFileRenamer";
import { getFileParts } from "@/utils/helpers";
import { cn } from "@/utils/cn";

export const fileProps = {
  file: undefined,
  isUploaded: false,
  isAutoGenerated: false,
  isGhost: false,
  isDeletable: true,
  isEditable: true,
  error: false,
  iconSize: "md",
  nameProps: {},
  withIcon: true,
  asLink: false,
  disabled: false,
  percent: 0,
  bg: "",
  className: "",
  onClick: () => {},
  onDelete: () => {},
  onEdit: (fileName, extension, onSuccess = () => {}) => {},
  onExchange: () => {},
};

const File = (_props = fileProps) => {
  const [isHovered, setIsHovered] = useState(false);
  const {
    file,
    isUploaded,
    isAutoGenerated,
    isGhost,
    isDeletable,
    isEditable,
    error,
    iconSize,
    nameProps,
    withIcon,
    asLink,
    disabled,
    percent,
    bg,
    className,
    ...props
  } = {
    ...fileProps,
    ..._props,
  };

  if (!file) return null;

  const [isEditing, setIsEditing] = useState(false);
  const toggleEdit = () => setIsEditing(!isEditing);

  const [base, extension] = getFileParts(file?.name);
  const [fileName, setFileName] = useState(base);

  const cardHover = bg && isUploaded && !error;

  const onClick = error || !isUploaded ? undefined : props.onClick;
  const onDelete = props.onDelete;

  const onExchange = () => {
    if (error || !isUploaded || isEditing || !props.onExchange) return;
    //TODO: Implement this
  };
  const onEdit = () => {
    if (error || !isUploaded || !isEditing || !props.onEdit) return;
    props.onEdit(fileName, extension, toggleEdit);
  };
  const _onClick = (e) => {
    e.stopPropagation();
    onClick();
  };

  const fileContentClasses = cn(
    "flex flex-col justify-center ml-2 w-full mr-2"
  );

  const fileTopRowClasses = cn("flex items-center justify-between w-full");

  const fileBottomRowClasses = cn("flex items-center w-full");

  return (
    <FileWrapper
      iconSize={iconSize}
      bg={bg}
      isUploaded={isUploaded}
      error={error}
      setIsHovered={cardHover ? setIsHovered : () => {}}
      onClick={cardHover ? _onClick : undefined}
      className={className}
    >
      {withIcon && (
        <FileIcon
          file={file}
          extension={extension}
          isUploaded={isUploaded}
          isAutoGenerated={isAutoGenerated}
          error={error}
          isGhost={isGhost}
          isHovered={isHovered}
          iconSize={iconSize}
          asLink={asLink}
          setIsHovered={!cardHover ? setIsHovered : undefined}
          onClick={!cardHover ? _onClick : undefined}
        />
      )}
      <div className={fileContentClasses}>
        <div className={fileTopRowClasses}>
          {!isEditing && (
            <FileName
              file={file}
              isUploaded={isUploaded}
              isAutoGenerated={isAutoGenerated}
              isGhost={isGhost}
              error={error}
              isHovered={isHovered}
              setIsHovered={!cardHover ? setIsHovered : undefined}
              onClick={!cardHover ? _onClick : undefined}
              asLink={asLink}
              {...nameProps}
            />
          )}
          {isEditing && (
            <FileRenamerForm
              isEditing={isEditing}
              fileName={fileName}
              extension={extension}
              setFileName={setFileName}
            />
          )}
        </div>
        {!isUploaded && !error && (
          <div className={fileBottomRowClasses}>
            <FileLoadingBar percent={percent} className="w-full mt-1" />
          </div>
        )}
        {error && (
          <div className={fileBottomRowClasses}>
            <FileError error={error} />
          </div>
        )}
      </div>
      {isDeletable && (
        <FileActions
          file={file}
          fileName={fileName}
          isUploaded={isUploaded}
          isDeletable={isDeletable}
          isEditable={isEditable}
          isEditing={isEditing}
          onDelete={onDelete}
          onEdit={onEdit}
          onExchange={onExchange}
          toggleEdit={toggleEdit}
          disabled={disabled}
        />
      )}
    </FileWrapper>
  );
};

export default File;
